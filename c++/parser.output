Terminals unused in grammar

   QUIT


State 22 conflicts: 5 shift/reduce
State 53 conflicts: 4 shift/reduce
State 63 conflicts: 5 shift/reduce
State 65 conflicts: 5 shift/reduce
State 71 conflicts: 4 shift/reduce
State 72 conflicts: 4 shift/reduce


Grammar

    0 $accept: calculation $end

    1 calculation: %empty
    2            | calculation line

    3 line: NEWLINE
    4     | iexp NEWLINE
    5     | bexp NEWLINE

    6 sexp: VAR

    7 fexp: FUN sexp RARROW bexp
    8     | FUN sexp RARROW iexp

    9 bexp: BOOL
   10     | IF bexp THEN bexp ELSE bexp
   11     | iexp LEQ iexp
   12     | LPAREN bexp RPAREN
   13     | LET sexp EQUAL bexp IN bexp
   14     | LET sexp EQUAL iexp IN bexp
   15     | fexp bexp

   16 iexp: INT
   17     | IF bexp THEN iexp ELSE iexp
   18     | iexp PLUS iexp
   19     | iexp MINUS iexp
   20     | iexp TIMES iexp
   21     | iexp DIVIDE iexp
   22     | LET sexp EQUAL iexp IN iexp
   23     | LET sexp EQUAL bexp IN iexp
   24     | fexp iexp
   25     | LPAREN iexp RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 16
BOOL (259) 9
VAR (260) 6
LPAREN (261) 12 25
RPAREN (262) 12 25
PLUS (263) 18
MINUS (264) 19
TIMES (265) 20
DIVIDE (266) 21
LEQ (267) 11
IF (268) 10 17
THEN (269) 10 17
ELSE (270) 10 17
LET (271) 13 14 22 23
EQUAL (272) 13 14 22 23
IN (273) 13 14 22 23
FUN (274) 7 8
RARROW (275) 7 8
NEWLINE (276) 3 4 5
QUIT (277)


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
calculation (24)
    on left: 1 2, on right: 0 2
line (25)
    on left: 3 4 5, on right: 2
sexp (26)
    on left: 6, on right: 7 8 13 14 22 23
fexp (27)
    on left: 7 8, on right: 15 24
bexp (28)
    on left: 9 10 11 12 13 14 15, on right: 5 7 10 12 13 14 15 17 23
iexp (29)
    on left: 16 17 18 19 20 21 22 23 24 25, on right: 4 8 11 14 17
    18 19 20 21 22 23 24 25


State 0

    0 $accept: . calculation $end

    $default  reduce using rule 1 (calculation)

    calculation  go to state 1


State 1

    0 $accept: calculation . $end
    2 calculation: calculation . line

    $end     shift, and go to state 2
    INT      shift, and go to state 3
    BOOL     shift, and go to state 4
    LPAREN   shift, and go to state 5
    IF       shift, and go to state 6
    LET      shift, and go to state 7
    FUN      shift, and go to state 8
    NEWLINE  shift, and go to state 9

    line  go to state 10
    fexp  go to state 11
    bexp  go to state 12
    iexp  go to state 13


State 2

    0 $accept: calculation $end .

    $default  accept


State 3

   16 iexp: INT .

    $default  reduce using rule 16 (iexp)


State 4

    9 bexp: BOOL .

    $default  reduce using rule 9 (bexp)


State 5

   12 bexp: LPAREN . bexp RPAREN
   25 iexp: LPAREN . iexp RPAREN

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 14
    iexp  go to state 15


State 6

   10 bexp: IF . bexp THEN bexp ELSE bexp
   17 iexp: IF . bexp THEN iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 16
    iexp  go to state 17


State 7

   13 bexp: LET . sexp EQUAL bexp IN bexp
   14     | LET . sexp EQUAL iexp IN bexp
   22 iexp: LET . sexp EQUAL iexp IN iexp
   23     | LET . sexp EQUAL bexp IN iexp

    VAR  shift, and go to state 18

    sexp  go to state 19


State 8

    7 fexp: FUN . sexp RARROW bexp
    8     | FUN . sexp RARROW iexp

    VAR  shift, and go to state 18

    sexp  go to state 20


State 9

    3 line: NEWLINE .

    $default  reduce using rule 3 (line)


State 10

    2 calculation: calculation line .

    $default  reduce using rule 2 (calculation)


State 11

   15 bexp: fexp . bexp
   24 iexp: fexp . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 21
    iexp  go to state 22


State 12

    5 line: bexp . NEWLINE

    NEWLINE  shift, and go to state 23


State 13

    4 line: iexp . NEWLINE
   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS     shift, and go to state 24
    MINUS    shift, and go to state 25
    TIMES    shift, and go to state 26
    DIVIDE   shift, and go to state 27
    LEQ      shift, and go to state 28
    NEWLINE  shift, and go to state 29


State 14

   12 bexp: LPAREN bexp . RPAREN

    RPAREN  shift, and go to state 30


State 15

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   25     | LPAREN iexp . RPAREN

    RPAREN  shift, and go to state 31
    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28


State 16

   10 bexp: IF bexp . THEN bexp ELSE bexp
   17 iexp: IF bexp . THEN iexp ELSE iexp

    THEN  shift, and go to state 32


State 17

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28


State 18

    6 sexp: VAR .

    $default  reduce using rule 6 (sexp)


State 19

   13 bexp: LET sexp . EQUAL bexp IN bexp
   14     | LET sexp . EQUAL iexp IN bexp
   22 iexp: LET sexp . EQUAL iexp IN iexp
   23     | LET sexp . EQUAL bexp IN iexp

    EQUAL  shift, and go to state 33


State 20

    7 fexp: FUN sexp . RARROW bexp
    8     | FUN sexp . RARROW iexp

    RARROW  shift, and go to state 34


State 21

   15 bexp: fexp bexp .

    $default  reduce using rule 15 (bexp)


State 22

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   24     | fexp iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28

    PLUS      [reduce using rule 24 (iexp)]
    MINUS     [reduce using rule 24 (iexp)]
    TIMES     [reduce using rule 24 (iexp)]
    DIVIDE    [reduce using rule 24 (iexp)]
    LEQ       [reduce using rule 24 (iexp)]
    $default  reduce using rule 24 (iexp)


State 23

    5 line: bexp NEWLINE .

    $default  reduce using rule 5 (line)


State 24

   18 iexp: iexp PLUS . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 39


State 25

   19 iexp: iexp MINUS . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 40


State 26

   20 iexp: iexp TIMES . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 41


State 27

   21 iexp: iexp DIVIDE . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 42


State 28

   11 bexp: iexp LEQ . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 43


State 29

    4 line: iexp NEWLINE .

    $default  reduce using rule 4 (line)


State 30

   12 bexp: LPAREN bexp RPAREN .

    $default  reduce using rule 12 (bexp)


State 31

   25 iexp: LPAREN iexp RPAREN .

    $default  reduce using rule 25 (iexp)


State 32

   10 bexp: IF bexp THEN . bexp ELSE bexp
   17 iexp: IF bexp THEN . iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 44
    iexp  go to state 45


State 33

   13 bexp: LET sexp EQUAL . bexp IN bexp
   14     | LET sexp EQUAL . iexp IN bexp
   22 iexp: LET sexp EQUAL . iexp IN iexp
   23     | LET sexp EQUAL . bexp IN iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 46
    iexp  go to state 47


State 34

    7 fexp: FUN sexp RARROW . bexp
    8     | FUN sexp RARROW . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 48
    iexp  go to state 49


State 35

   25 iexp: LPAREN . iexp RPAREN

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 50


State 36

   17 iexp: IF . bexp THEN iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 51
    iexp  go to state 17


State 37

   22 iexp: LET . sexp EQUAL iexp IN iexp
   23     | LET . sexp EQUAL bexp IN iexp

    VAR  shift, and go to state 18

    sexp  go to state 52


State 38

   24 iexp: fexp . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 53


State 39

   18 iexp: iexp . PLUS iexp
   18     | iexp PLUS iexp .
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    $default  reduce using rule 18 (iexp)


State 40

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   19     | iexp MINUS iexp .
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    $default  reduce using rule 19 (iexp)


State 41

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   20     | iexp TIMES iexp .
   21     | iexp . DIVIDE iexp

    $default  reduce using rule 20 (iexp)


State 42

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   21     | iexp DIVIDE iexp .

    $default  reduce using rule 21 (iexp)


State 43

   11 bexp: iexp LEQ iexp .
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    $default  reduce using rule 11 (bexp)


State 44

   10 bexp: IF bexp THEN bexp . ELSE bexp

    ELSE  shift, and go to state 54


State 45

   11 bexp: iexp . LEQ iexp
   17 iexp: IF bexp THEN iexp . ELSE iexp
   18     | iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28
    ELSE    shift, and go to state 55


State 46

   13 bexp: LET sexp EQUAL bexp . IN bexp
   23 iexp: LET sexp EQUAL bexp . IN iexp

    IN  shift, and go to state 56


State 47

   11 bexp: iexp . LEQ iexp
   14     | LET sexp EQUAL iexp . IN bexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   22     | LET sexp EQUAL iexp . IN iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28
    IN      shift, and go to state 57


State 48

    7 fexp: FUN sexp RARROW bexp .

    $default  reduce using rule 7 (fexp)


State 49

    8 fexp: FUN sexp RARROW iexp .
   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28

    $default  reduce using rule 8 (fexp)


State 50

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   25     | LPAREN iexp . RPAREN

    RPAREN  shift, and go to state 31
    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27


State 51

   17 iexp: IF bexp . THEN iexp ELSE iexp

    THEN  shift, and go to state 58


State 52

   22 iexp: LET sexp . EQUAL iexp IN iexp
   23     | LET sexp . EQUAL bexp IN iexp

    EQUAL  shift, and go to state 59


State 53

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   24     | fexp iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    PLUS      [reduce using rule 24 (iexp)]
    MINUS     [reduce using rule 24 (iexp)]
    TIMES     [reduce using rule 24 (iexp)]
    DIVIDE    [reduce using rule 24 (iexp)]
    $default  reduce using rule 24 (iexp)


State 54

   10 bexp: IF bexp THEN bexp ELSE . bexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 60
    iexp  go to state 17


State 55

   17 iexp: IF bexp THEN iexp ELSE . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 61


State 56

   13 bexp: LET sexp EQUAL bexp IN . bexp
   23 iexp: LET sexp EQUAL bexp IN . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 62
    iexp  go to state 63


State 57

   14 bexp: LET sexp EQUAL iexp IN . bexp
   22 iexp: LET sexp EQUAL iexp IN . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 64
    iexp  go to state 65


State 58

   17 iexp: IF bexp THEN . iexp ELSE iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 66


State 59

   22 iexp: LET sexp EQUAL . iexp IN iexp
   23     | LET sexp EQUAL . bexp IN iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 67
    iexp  go to state 68


State 60

   10 bexp: IF bexp THEN bexp ELSE bexp .

    $default  reduce using rule 10 (bexp)


State 61

   17 iexp: IF bexp THEN iexp ELSE iexp .
   18     | iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    $default  reduce using rule 17 (iexp)


State 62

   13 bexp: LET sexp EQUAL bexp IN bexp .

    $default  reduce using rule 13 (bexp)


State 63

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   23     | LET sexp EQUAL bexp IN iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28

    PLUS      [reduce using rule 23 (iexp)]
    MINUS     [reduce using rule 23 (iexp)]
    TIMES     [reduce using rule 23 (iexp)]
    DIVIDE    [reduce using rule 23 (iexp)]
    LEQ       [reduce using rule 23 (iexp)]
    $default  reduce using rule 23 (iexp)


State 64

   14 bexp: LET sexp EQUAL iexp IN bexp .

    $default  reduce using rule 14 (bexp)


State 65

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   22     | LET sexp EQUAL iexp IN iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28

    PLUS      [reduce using rule 22 (iexp)]
    MINUS     [reduce using rule 22 (iexp)]
    TIMES     [reduce using rule 22 (iexp)]
    DIVIDE    [reduce using rule 22 (iexp)]
    LEQ       [reduce using rule 22 (iexp)]
    $default  reduce using rule 22 (iexp)


State 66

   17 iexp: IF bexp THEN iexp . ELSE iexp
   18     | iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    ELSE    shift, and go to state 55


State 67

   23 iexp: LET sexp EQUAL bexp . IN iexp

    IN  shift, and go to state 69


State 68

   11 bexp: iexp . LEQ iexp
   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   22     | LET sexp EQUAL iexp . IN iexp

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27
    LEQ     shift, and go to state 28
    IN      shift, and go to state 70


State 69

   23 iexp: LET sexp EQUAL bexp IN . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 71


State 70

   22 iexp: LET sexp EQUAL iexp IN . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 35
    IF      shift, and go to state 36
    LET     shift, and go to state 37
    FUN     shift, and go to state 8

    fexp  go to state 38
    iexp  go to state 72


State 71

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   23     | LET sexp EQUAL bexp IN iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    PLUS      [reduce using rule 23 (iexp)]
    MINUS     [reduce using rule 23 (iexp)]
    TIMES     [reduce using rule 23 (iexp)]
    DIVIDE    [reduce using rule 23 (iexp)]
    $default  reduce using rule 23 (iexp)


State 72

   18 iexp: iexp . PLUS iexp
   19     | iexp . MINUS iexp
   20     | iexp . TIMES iexp
   21     | iexp . DIVIDE iexp
   22     | LET sexp EQUAL iexp IN iexp .

    PLUS    shift, and go to state 24
    MINUS   shift, and go to state 25
    TIMES   shift, and go to state 26
    DIVIDE  shift, and go to state 27

    PLUS      [reduce using rule 22 (iexp)]
    MINUS     [reduce using rule 22 (iexp)]
    TIMES     [reduce using rule 22 (iexp)]
    DIVIDE    [reduce using rule 22 (iexp)]
    $default  reduce using rule 22 (iexp)
