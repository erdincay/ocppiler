Terminals unused in grammar

   QUIT


State 21 conflicts: 5 shift/reduce
State 52 conflicts: 4 shift/reduce
State 62 conflicts: 5 shift/reduce
State 64 conflicts: 5 shift/reduce
State 70 conflicts: 4 shift/reduce
State 71 conflicts: 4 shift/reduce


Grammar

    0 $accept: calculation $end

    1 calculation: %empty
    2            | calculation line

    3 line: NEWLINE
    4     | iexp NEWLINE
    5     | bexp NEWLINE

    6 fexp: FUN VAR RARROW bexp
    7     | FUN VAR RARROW iexp

    8 bexp: BOOL
    9     | IF bexp THEN bexp ELSE bexp
   10     | iexp LEQ iexp
   11     | LPAREN bexp RPAREN
   12     | LET VAR EQUAL bexp IN bexp
   13     | LET VAR EQUAL iexp IN bexp
   14     | fexp bexp

   15 iexp: INT
   16     | IF bexp THEN iexp ELSE iexp
   17     | iexp PLUS iexp
   18     | iexp MINUS iexp
   19     | iexp TIMES iexp
   20     | iexp DIVIDE iexp
   21     | LET VAR EQUAL iexp IN iexp
   22     | LET VAR EQUAL bexp IN iexp
   23     | fexp iexp
   24     | LPAREN iexp RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 15
BOOL (259) 8
VAR (260) 6 7 12 13 21 22
LPAREN (261) 11 24
RPAREN (262) 11 24
PLUS (263) 17
MINUS (264) 18
TIMES (265) 19
DIVIDE (266) 20
LEQ (267) 10
IF (268) 9 16
THEN (269) 9 16
ELSE (270) 9 16
LET (271) 12 13 21 22
EQUAL (272) 12 13 21 22
IN (273) 12 13 21 22
FUN (274) 6 7
RARROW (275) 6 7
NEWLINE (276) 3 4 5
QUIT (277)


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
calculation (24)
    on left: 1 2, on right: 0 2
line (25)
    on left: 3 4 5, on right: 2
fexp (26)
    on left: 6 7, on right: 14 23
bexp (27)
    on left: 8 9 10 11 12 13 14, on right: 5 6 9 11 12 13 14 16 22
iexp (28)
    on left: 15 16 17 18 19 20 21 22 23 24, on right: 4 7 10 13 16
    17 18 19 20 21 22 23 24


State 0

    0 $accept: . calculation $end

    $default  reduce using rule 1 (calculation)

    calculation  go to state 1


State 1

    0 $accept: calculation . $end
    2 calculation: calculation . line

    $end     shift, and go to state 2
    INT      shift, and go to state 3
    BOOL     shift, and go to state 4
    LPAREN   shift, and go to state 5
    IF       shift, and go to state 6
    LET      shift, and go to state 7
    FUN      shift, and go to state 8
    NEWLINE  shift, and go to state 9

    line  go to state 10
    fexp  go to state 11
    bexp  go to state 12
    iexp  go to state 13


State 2

    0 $accept: calculation $end .

    $default  accept


State 3

   15 iexp: INT .

    $default  reduce using rule 15 (iexp)


State 4

    8 bexp: BOOL .

    $default  reduce using rule 8 (bexp)


State 5

   11 bexp: LPAREN . bexp RPAREN
   24 iexp: LPAREN . iexp RPAREN

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 14
    iexp  go to state 15


State 6

    9 bexp: IF . bexp THEN bexp ELSE bexp
   16 iexp: IF . bexp THEN iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 16
    iexp  go to state 17


State 7

   12 bexp: LET . VAR EQUAL bexp IN bexp
   13     | LET . VAR EQUAL iexp IN bexp
   21 iexp: LET . VAR EQUAL iexp IN iexp
   22     | LET . VAR EQUAL bexp IN iexp

    VAR  shift, and go to state 18


State 8

    6 fexp: FUN . VAR RARROW bexp
    7     | FUN . VAR RARROW iexp

    VAR  shift, and go to state 19


State 9

    3 line: NEWLINE .

    $default  reduce using rule 3 (line)


State 10

    2 calculation: calculation line .

    $default  reduce using rule 2 (calculation)


State 11

   14 bexp: fexp . bexp
   23 iexp: fexp . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 20
    iexp  go to state 21


State 12

    5 line: bexp . NEWLINE

    NEWLINE  shift, and go to state 22


State 13

    4 line: iexp . NEWLINE
   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS     shift, and go to state 23
    MINUS    shift, and go to state 24
    TIMES    shift, and go to state 25
    DIVIDE   shift, and go to state 26
    LEQ      shift, and go to state 27
    NEWLINE  shift, and go to state 28


State 14

   11 bexp: LPAREN bexp . RPAREN

    RPAREN  shift, and go to state 29


State 15

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   24     | LPAREN iexp . RPAREN

    RPAREN  shift, and go to state 30
    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27


State 16

    9 bexp: IF bexp . THEN bexp ELSE bexp
   16 iexp: IF bexp . THEN iexp ELSE iexp

    THEN  shift, and go to state 31


State 17

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27


State 18

   12 bexp: LET VAR . EQUAL bexp IN bexp
   13     | LET VAR . EQUAL iexp IN bexp
   21 iexp: LET VAR . EQUAL iexp IN iexp
   22     | LET VAR . EQUAL bexp IN iexp

    EQUAL  shift, and go to state 32


State 19

    6 fexp: FUN VAR . RARROW bexp
    7     | FUN VAR . RARROW iexp

    RARROW  shift, and go to state 33


State 20

   14 bexp: fexp bexp .

    $default  reduce using rule 14 (bexp)


State 21

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   23     | fexp iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27

    PLUS      [reduce using rule 23 (iexp)]
    MINUS     [reduce using rule 23 (iexp)]
    TIMES     [reduce using rule 23 (iexp)]
    DIVIDE    [reduce using rule 23 (iexp)]
    LEQ       [reduce using rule 23 (iexp)]
    $default  reduce using rule 23 (iexp)


State 22

    5 line: bexp NEWLINE .

    $default  reduce using rule 5 (line)


State 23

   17 iexp: iexp PLUS . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 38


State 24

   18 iexp: iexp MINUS . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 39


State 25

   19 iexp: iexp TIMES . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 40


State 26

   20 iexp: iexp DIVIDE . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 41


State 27

   10 bexp: iexp LEQ . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 42


State 28

    4 line: iexp NEWLINE .

    $default  reduce using rule 4 (line)


State 29

   11 bexp: LPAREN bexp RPAREN .

    $default  reduce using rule 11 (bexp)


State 30

   24 iexp: LPAREN iexp RPAREN .

    $default  reduce using rule 24 (iexp)


State 31

    9 bexp: IF bexp THEN . bexp ELSE bexp
   16 iexp: IF bexp THEN . iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 43
    iexp  go to state 44


State 32

   12 bexp: LET VAR EQUAL . bexp IN bexp
   13     | LET VAR EQUAL . iexp IN bexp
   21 iexp: LET VAR EQUAL . iexp IN iexp
   22     | LET VAR EQUAL . bexp IN iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 45
    iexp  go to state 46


State 33

    6 fexp: FUN VAR RARROW . bexp
    7     | FUN VAR RARROW . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 47
    iexp  go to state 48


State 34

   24 iexp: LPAREN . iexp RPAREN

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 49


State 35

   16 iexp: IF . bexp THEN iexp ELSE iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 50
    iexp  go to state 17


State 36

   21 iexp: LET . VAR EQUAL iexp IN iexp
   22     | LET . VAR EQUAL bexp IN iexp

    VAR  shift, and go to state 51


State 37

   23 iexp: fexp . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 52


State 38

   17 iexp: iexp . PLUS iexp
   17     | iexp PLUS iexp .
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    $default  reduce using rule 17 (iexp)


State 39

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   18     | iexp MINUS iexp .
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    $default  reduce using rule 18 (iexp)


State 40

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   19     | iexp TIMES iexp .
   20     | iexp . DIVIDE iexp

    $default  reduce using rule 19 (iexp)


State 41

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   20     | iexp DIVIDE iexp .

    $default  reduce using rule 20 (iexp)


State 42

   10 bexp: iexp LEQ iexp .
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    $default  reduce using rule 10 (bexp)


State 43

    9 bexp: IF bexp THEN bexp . ELSE bexp

    ELSE  shift, and go to state 53


State 44

   10 bexp: iexp . LEQ iexp
   16 iexp: IF bexp THEN iexp . ELSE iexp
   17     | iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27
    ELSE    shift, and go to state 54


State 45

   12 bexp: LET VAR EQUAL bexp . IN bexp
   22 iexp: LET VAR EQUAL bexp . IN iexp

    IN  shift, and go to state 55


State 46

   10 bexp: iexp . LEQ iexp
   13     | LET VAR EQUAL iexp . IN bexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   21     | LET VAR EQUAL iexp . IN iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27
    IN      shift, and go to state 56


State 47

    6 fexp: FUN VAR RARROW bexp .

    $default  reduce using rule 6 (fexp)


State 48

    7 fexp: FUN VAR RARROW iexp .
   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27

    $default  reduce using rule 7 (fexp)


State 49

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   24     | LPAREN iexp . RPAREN

    RPAREN  shift, and go to state 30
    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26


State 50

   16 iexp: IF bexp . THEN iexp ELSE iexp

    THEN  shift, and go to state 57


State 51

   21 iexp: LET VAR . EQUAL iexp IN iexp
   22     | LET VAR . EQUAL bexp IN iexp

    EQUAL  shift, and go to state 58


State 52

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   23     | fexp iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    PLUS      [reduce using rule 23 (iexp)]
    MINUS     [reduce using rule 23 (iexp)]
    TIMES     [reduce using rule 23 (iexp)]
    DIVIDE    [reduce using rule 23 (iexp)]
    $default  reduce using rule 23 (iexp)


State 53

    9 bexp: IF bexp THEN bexp ELSE . bexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 59
    iexp  go to state 17


State 54

   16 iexp: IF bexp THEN iexp ELSE . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 60


State 55

   12 bexp: LET VAR EQUAL bexp IN . bexp
   22 iexp: LET VAR EQUAL bexp IN . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 61
    iexp  go to state 62


State 56

   13 bexp: LET VAR EQUAL iexp IN . bexp
   21 iexp: LET VAR EQUAL iexp IN . iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 63
    iexp  go to state 64


State 57

   16 iexp: IF bexp THEN . iexp ELSE iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 65


State 58

   21 iexp: LET VAR EQUAL . iexp IN iexp
   22     | LET VAR EQUAL . bexp IN iexp

    INT     shift, and go to state 3
    BOOL    shift, and go to state 4
    LPAREN  shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 7
    FUN     shift, and go to state 8

    fexp  go to state 11
    bexp  go to state 66
    iexp  go to state 67


State 59

    9 bexp: IF bexp THEN bexp ELSE bexp .

    $default  reduce using rule 9 (bexp)


State 60

   16 iexp: IF bexp THEN iexp ELSE iexp .
   17     | iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    $default  reduce using rule 16 (iexp)


State 61

   12 bexp: LET VAR EQUAL bexp IN bexp .

    $default  reduce using rule 12 (bexp)


State 62

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   22     | LET VAR EQUAL bexp IN iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27

    PLUS      [reduce using rule 22 (iexp)]
    MINUS     [reduce using rule 22 (iexp)]
    TIMES     [reduce using rule 22 (iexp)]
    DIVIDE    [reduce using rule 22 (iexp)]
    LEQ       [reduce using rule 22 (iexp)]
    $default  reduce using rule 22 (iexp)


State 63

   13 bexp: LET VAR EQUAL iexp IN bexp .

    $default  reduce using rule 13 (bexp)


State 64

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   21     | LET VAR EQUAL iexp IN iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27

    PLUS      [reduce using rule 21 (iexp)]
    MINUS     [reduce using rule 21 (iexp)]
    TIMES     [reduce using rule 21 (iexp)]
    DIVIDE    [reduce using rule 21 (iexp)]
    LEQ       [reduce using rule 21 (iexp)]
    $default  reduce using rule 21 (iexp)


State 65

   16 iexp: IF bexp THEN iexp . ELSE iexp
   17     | iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    ELSE    shift, and go to state 54


State 66

   22 iexp: LET VAR EQUAL bexp . IN iexp

    IN  shift, and go to state 68


State 67

   10 bexp: iexp . LEQ iexp
   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   21     | LET VAR EQUAL iexp . IN iexp

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26
    LEQ     shift, and go to state 27
    IN      shift, and go to state 69


State 68

   22 iexp: LET VAR EQUAL bexp IN . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 70


State 69

   21 iexp: LET VAR EQUAL iexp IN . iexp

    INT     shift, and go to state 3
    LPAREN  shift, and go to state 34
    IF      shift, and go to state 35
    LET     shift, and go to state 36
    FUN     shift, and go to state 8

    fexp  go to state 37
    iexp  go to state 71


State 70

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   22     | LET VAR EQUAL bexp IN iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    PLUS      [reduce using rule 22 (iexp)]
    MINUS     [reduce using rule 22 (iexp)]
    TIMES     [reduce using rule 22 (iexp)]
    DIVIDE    [reduce using rule 22 (iexp)]
    $default  reduce using rule 22 (iexp)


State 71

   17 iexp: iexp . PLUS iexp
   18     | iexp . MINUS iexp
   19     | iexp . TIMES iexp
   20     | iexp . DIVIDE iexp
   21     | LET VAR EQUAL iexp IN iexp .

    PLUS    shift, and go to state 23
    MINUS   shift, and go to state 24
    TIMES   shift, and go to state 25
    DIVIDE  shift, and go to state 26

    PLUS      [reduce using rule 21 (iexp)]
    MINUS     [reduce using rule 21 (iexp)]
    TIMES     [reduce using rule 21 (iexp)]
    DIVIDE    [reduce using rule 21 (iexp)]
    $default  reduce using rule 21 (iexp)
